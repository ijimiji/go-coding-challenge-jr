// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pkg/proto/challenge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChallengeServiceClient is the client API for ChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeServiceClient interface {
	MakeShortLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	StartTimer(ctx context.Context, in *Timer, opts ...grpc.CallOption) (ChallengeService_StartTimerClient, error)
	ReadMetadata(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*Placeholder, error)
}

type challengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeServiceClient(cc grpc.ClientConnInterface) ChallengeServiceClient {
	return &challengeServiceClient{cc}
}

func (c *challengeServiceClient) MakeShortLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/ChallengeService/MakeShortLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) StartTimer(ctx context.Context, in *Timer, opts ...grpc.CallOption) (ChallengeService_StartTimerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChallengeService_ServiceDesc.Streams[0], "/ChallengeService/StartTimer", opts...)
	if err != nil {
		return nil, err
	}
	x := &challengeServiceStartTimerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChallengeService_StartTimerClient interface {
	Recv() (*Timer, error)
	grpc.ClientStream
}

type challengeServiceStartTimerClient struct {
	grpc.ClientStream
}

func (x *challengeServiceStartTimerClient) Recv() (*Timer, error) {
	m := new(Timer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *challengeServiceClient) ReadMetadata(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*Placeholder, error) {
	out := new(Placeholder)
	err := c.cc.Invoke(ctx, "/ChallengeService/ReadMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServiceServer is the server API for ChallengeService service.
// All implementations must embed UnimplementedChallengeServiceServer
// for forward compatibility
type ChallengeServiceServer interface {
	MakeShortLink(context.Context, *Link) (*Link, error)
	StartTimer(*Timer, ChallengeService_StartTimerServer) error
	ReadMetadata(context.Context, *Placeholder) (*Placeholder, error)
	mustEmbedUnimplementedChallengeServiceServer()
}

// UnimplementedChallengeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChallengeServiceServer struct {
}

func (UnimplementedChallengeServiceServer) MakeShortLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeShortLink not implemented")
}
func (UnimplementedChallengeServiceServer) StartTimer(*Timer, ChallengeService_StartTimerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTimer not implemented")
}
func (UnimplementedChallengeServiceServer) ReadMetadata(context.Context, *Placeholder) (*Placeholder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMetadata not implemented")
}
func (UnimplementedChallengeServiceServer) mustEmbedUnimplementedChallengeServiceServer() {}

// UnsafeChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeServiceServer will
// result in compilation errors.
type UnsafeChallengeServiceServer interface {
	mustEmbedUnimplementedChallengeServiceServer()
}

func RegisterChallengeServiceServer(s grpc.ServiceRegistrar, srv ChallengeServiceServer) {
	s.RegisterService(&ChallengeService_ServiceDesc, srv)
}

func _ChallengeService_MakeShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).MakeShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChallengeService/MakeShortLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).MakeShortLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_StartTimer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChallengeServiceServer).StartTimer(m, &challengeServiceStartTimerServer{stream})
}

type ChallengeService_StartTimerServer interface {
	Send(*Timer) error
	grpc.ServerStream
}

type challengeServiceStartTimerServer struct {
	grpc.ServerStream
}

func (x *challengeServiceStartTimerServer) Send(m *Timer) error {
	return x.ServerStream.SendMsg(m)
}

func _ChallengeService_ReadMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Placeholder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).ReadMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChallengeService/ReadMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).ReadMetadata(ctx, req.(*Placeholder))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeService_ServiceDesc is the grpc.ServiceDesc for ChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChallengeService",
	HandlerType: (*ChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeShortLink",
			Handler:    _ChallengeService_MakeShortLink_Handler,
		},
		{
			MethodName: "ReadMetadata",
			Handler:    _ChallengeService_ReadMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartTimer",
			Handler:       _ChallengeService_StartTimer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/challenge.proto",
}
